//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/General/Services/Input/InputControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace CardStacker.General.Services.Input
{
    public partial class @InputControls : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @InputControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputControls"",
    ""maps"": [
        {
            ""name"": ""General"",
            ""id"": ""39ac5611-1c78-496a-8ca9-8d387647c312"",
            ""actions"": [
                {
                    ""name"": ""Arrows"",
                    ""type"": ""Value"",
                    ""id"": ""8623baba-b74c-4ebe-b7b9-317a5ff3eeb1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Point"",
                    ""type"": ""PassThrough"",
                    ""id"": ""2b5c2110-3a5d-4489-b1ea-51b3bff44e44"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseLeftClick"",
                    ""type"": ""Button"",
                    ""id"": ""6139dd8d-3afb-449e-a804-b5ed8e5b4083"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""ccbf7f4c-5dd4-46ac-aa4f-ca9848ed89ad"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Arrows"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""6ba61a7c-f285-4d9c-bda0-6230804037f6"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Arrows"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""cf4380b3-82bc-4f20-8d4b-a06c7aa8279a"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Arrows"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""ab9c3b97-2ff0-4f26-bfa3-398d7df5d40d"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Arrows"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""868e338f-3fd5-451d-b057-94e5c4aa45ed"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Arrows"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""d690ba21-5456-4680-b894-83d6b739e1ed"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6d9a1cbe-f6fb-49ca-8171-6c3fa21300c8"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseLeftClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // General
            m_General = asset.FindActionMap("General", throwIfNotFound: true);
            m_General_Arrows = m_General.FindAction("Arrows", throwIfNotFound: true);
            m_General_Point = m_General.FindAction("Point", throwIfNotFound: true);
            m_General_MouseLeftClick = m_General.FindAction("MouseLeftClick", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // General
        private readonly InputActionMap m_General;
        private IGeneralActions m_GeneralActionsCallbackInterface;
        private readonly InputAction m_General_Arrows;
        private readonly InputAction m_General_Point;
        private readonly InputAction m_General_MouseLeftClick;
        public struct GeneralActions
        {
            private @InputControls m_Wrapper;
            public GeneralActions(@InputControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Arrows => m_Wrapper.m_General_Arrows;
            public InputAction @Point => m_Wrapper.m_General_Point;
            public InputAction @MouseLeftClick => m_Wrapper.m_General_MouseLeftClick;
            public InputActionMap Get() { return m_Wrapper.m_General; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(GeneralActions set) { return set.Get(); }
            public void SetCallbacks(IGeneralActions instance)
            {
                if (m_Wrapper.m_GeneralActionsCallbackInterface != null)
                {
                    @Arrows.started -= m_Wrapper.m_GeneralActionsCallbackInterface.OnArrows;
                    @Arrows.performed -= m_Wrapper.m_GeneralActionsCallbackInterface.OnArrows;
                    @Arrows.canceled -= m_Wrapper.m_GeneralActionsCallbackInterface.OnArrows;
                    @Point.started -= m_Wrapper.m_GeneralActionsCallbackInterface.OnPoint;
                    @Point.performed -= m_Wrapper.m_GeneralActionsCallbackInterface.OnPoint;
                    @Point.canceled -= m_Wrapper.m_GeneralActionsCallbackInterface.OnPoint;
                    @MouseLeftClick.started -= m_Wrapper.m_GeneralActionsCallbackInterface.OnMouseLeftClick;
                    @MouseLeftClick.performed -= m_Wrapper.m_GeneralActionsCallbackInterface.OnMouseLeftClick;
                    @MouseLeftClick.canceled -= m_Wrapper.m_GeneralActionsCallbackInterface.OnMouseLeftClick;
                }
                m_Wrapper.m_GeneralActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Arrows.started += instance.OnArrows;
                    @Arrows.performed += instance.OnArrows;
                    @Arrows.canceled += instance.OnArrows;
                    @Point.started += instance.OnPoint;
                    @Point.performed += instance.OnPoint;
                    @Point.canceled += instance.OnPoint;
                    @MouseLeftClick.started += instance.OnMouseLeftClick;
                    @MouseLeftClick.performed += instance.OnMouseLeftClick;
                    @MouseLeftClick.canceled += instance.OnMouseLeftClick;
                }
            }
        }
        public GeneralActions @General => new GeneralActions(this);
        public interface IGeneralActions
        {
            void OnArrows(InputAction.CallbackContext context);
            void OnPoint(InputAction.CallbackContext context);
            void OnMouseLeftClick(InputAction.CallbackContext context);
        }
    }
}
